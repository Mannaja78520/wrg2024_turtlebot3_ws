// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const EntityRefStruct = StructType({
  entity_type: primitiveTypes.byte,
  name: primitiveTypes.string,
  types: StringWrapper.refObjectArrayType,
});
const EntityRefArray = ArrayType(EntityRefStruct);
const EntityRefStructArray = StructType({
  data: EntityRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class EntityWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._typesArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new EntityRefStruct(other._refObject.toObject());
      this._entity_typeIntialized = true;
      this._nameIntialized = true;
      this._wrapperFields.name =  new StringWrapper(other._wrapperFields.name);
      this._wrapperFields.types = StringWrapper.createArray();
      this._wrapperFields.types.copy(other._wrapperFields.types);
      this.types = other.types;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new EntityRefStruct();
    this._entity_typeIntialized = false;
    this._nameIntialized = false;
    this._wrapperFields.name = new StringWrapper();
    this._wrapperFields.types = StringWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new EntityWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new EntityArrayWrapper;
  }
  static get ArrayType() {
    return EntityArrayWrapper;
  }
  static get refObjectArrayType() {
    return EntityRefStructArray
  }
  static get refObjectType() {
    return EntityRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._entity_typeIntialized) {
        throw new TypeError('Invalid argument: entity_type in Entity');
      }
      if (checkConsistency && !this._nameIntialized) {
        throw new TypeError('Invalid argument: name in Entity');
      }
    if (own) {
      this._wrapperFields.name.freeze(own, checkConsistency);
    }
    this._refObject.name = this._wrapperFields.name.refObject;
    if (!own) {
      this._wrapperFields.types.fill(this._typesArray);
      this._wrapperFields.types.freeze(own, checkConsistency);
      this._refObject.types = this._wrapperFields.types.refObject;
    } else {
      this._wrapperFields.types.fill([]);
      this._wrapperFields.types.freeze(own, checkConsistency);
      this._refObject.types = this._wrapperFields.types.refObject;
    }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._entity_typeIntialized = true;
    this._refObject.entity_type = refObject.entity_type;
    this._nameIntialized = true;
    this._wrapperFields.name.data = refObject.name.data;
    refObject.types.data.length = refObject.types.size;
    for (let index = 0; index < refObject.types.size; index++) {
      this._typesArray[index] = refObject.types.data[index].data;
    }
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.name);
    if (refObject.types.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.types);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.types, StringWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    EntityWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'micro_ros_msgs', subFolder: 'msg', interfaceName: 'Entity'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get entity_type() {
    if (!this._entity_typeIntialized) {
      return undefined;
    }
    return this._refObject.entity_type;
  }
  set entity_type(value) {
    this._entity_typeIntialized = true;
    this._refObject.entity_type = value;
  }
  get name() {
    if (!this._nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.name.data;
  }
  set name(value) {
    this._nameIntialized = true;
    this._wrapperFields.name.data = value;
  }
  get types() {
    return this._typesArray;
  }
  set types(value) {
    this._typesArray = value;
  }
  copyRefObject(refObject) {
    this._refObject = new EntityRefStruct(refObject.toObject());
    this._entity_typeIntialized = true;
    this._nameIntialized = true;
    this._wrapperFields.name.copyRefObject(this._refObject.name);
    refObject.types.data.length = refObject.types.size;
    for (let index = 0; index < refObject.types.size; index++) {
      this._typesArray[index] = refObject.types.data[index].data;
    }
  }
  copy(other) {
    this._refObject = new EntityRefStruct(other._refObject.toObject());
    this._entity_typeIntialized = true;
    this._nameIntialized = true;
    this._wrapperFields.name.copy(other._wrapperFields.name);
    this._typesArray = other._typesArray.slice();
  }
  static get classType() {
    return EntityWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"byte","name":"PUBLISHER","value":0},{"type":"byte","name":"SUBSCRIBER","value":1},{"type":"byte","name":"SERVICE_SERVER","value":2},{"type":"byte","name":"SERVICE_CLIENT","value":3}],"fields":[{"name":"entity_type","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"byte","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":256,"isPrimitiveType":true},"default_value":null},{"name":"types","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":256,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"micro_ros_msgs","type":"Entity","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Entity"};
  }
  hasMember(name) {
    let memberNames = ["entity_type","name","types"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class EntityArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof EntityWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new EntityWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to EntityArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to EntityArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new EntityRefArray(size);
    this._refObject = new EntityRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new EntityWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof EntityArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "EntityArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      EntityWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return EntityWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return EntityArrayWrapper;
  }
}
// Define constants (4 in total)
Object.defineProperty(EntityWrapper, "PUBLISHER", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EntityWrapper, "SUBSCRIBER", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EntityWrapper, "SERVICE_SERVER", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(EntityWrapper, "SERVICE_CLIENT", {value: 3, writable: false, enumerable: true, configurable: true});
module.exports = EntityWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "byte",
      "name": "PUBLISHER",
      "value": 0
    },
    {
      "type": "byte",
      "name": "SUBSCRIBER",
      "value": 1
    },
    {
      "type": "byte",
      "name": "SERVICE_SERVER",
      "value": 2
    },
    {
      "type": "byte",
      "name": "SERVICE_CLIENT",
      "value": 3
    }
  ],
  "fields": [
    {
      "name": "entity_type",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "byte",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": 256,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "types",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": 256,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "micro_ros_msgs",
    "type": "Entity",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Entity"
}
*/
